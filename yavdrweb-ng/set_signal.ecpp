<%pre>
#include <stdlib.h>
#include <string>
#include <ctype.h>

extern "C" {
#include <yavdr/db-utils/dbset.h>
#include <yavdr/db-utils/dbremove.h>
};

#include <yavdr/common.h>

using namespace std;
</%pre><& authenticate ><%args>
//Default type of args is string and we should leave it like this
//For more robustness, avoid to define integer vars in here, better cast string to int later!!!
signal;
signal_params = "";
value;
value2;
value3;
value4;
value5;
value6;
value7;
value8;
value9;
string values[];
</%args><%shared>
void Tokenize(const string& str,
		vector<string>& tokens,
		const string& delimiters = " ")
{
	tokens.clear();
	// Skip delimiters at beginning.
	string::size_type lastPos = str.find_first_not_of(delimiters, 0);
	// Find first "non-delimiter".
	string::size_type pos = str.find_first_of(delimiters, lastPos);

	while (string::npos != pos || string::npos != lastPos)
	{
		// Found a token, add it to the vector.
		tokens.push_back(str.substr(lastPos, pos - lastPos));
		// Skip delimiters.  Note the "not_of"
		lastPos = str.find_first_not_of(delimiters, pos);
		// Find next "non-delimiter"
		pos = str.find_first_of(delimiters, lastPos);
	}
}
</%shared><%cpp>

string success = "false";
int ret = 0;

if (
		(signal == "reboot") ||
		(signal == "change-frontend") ||
		(signal == "change-lifeguard") ||
		(signal == "kill-xbmc") ||
		(signal == "reset-xbmc") ||
		(signal == "restart-vdr") ||
		(signal == "change-timeout") ||
		(signal == "change-sound") ||
		(signal == "graphtft-state-change") ||
		(signal == "change-epg") ||
		(signal == "change-display") ||
		(signal == "change-plugin") ||
		(signal == "rescan-display") ||
		(signal == "test-viewport")
)
{

	if (signal == "change-frontend" )
	{
        if ((value == "xine") || (value == "sxfe") || (value == "softhddevice") || (value == "xbmc") || (value == "headless") || (value == "hdff") || (value == "custom"))
        {
            int err = dbset("vdr.setup=%s", value.c_str());
        }
        if ((value2 == "xine") || (value2 == "sxfe") || (value2 == "softhddevice") || (value2 == "xbmc") || (value2 == "disabled") || (value2 == "blank"))
        {
            int err = dbset("vdr.frontend=%s", value2.c_str());
        }
        if ((value3 == "xine") || (value3 == "xineliboutput") || (value3 == "softhddevice") || (value3 == "streaming") || (value3 == "disabled") || (value3 == "hdff") || (value3 == "sdff") || (value3 == "pvr350"))
        {
            int err = dbset("vdr.backend=%s", value3.c_str());
        }
        if (((value2 == "sxfe") || (value2 == "blank")) && (value4 == "on"))
        {
            int err = dbset("system.x11.hud=%s", "1");
        }
        else
        {
            int err = dbset("system.x11.hud=%s", "0");
        }
	}
	else if (signal == "change-epg" )
	{
		if ((value == "") || (value == "ISO-8859-9"))
		{
			int err = dbset("vdr.epg.charset_override=%s", value.c_str());
		}
	}
	else if (signal == "change-timeout" )
	{
		int timeoutval = atoi(value.c_str());
		if (timeoutval >= 0 && timeoutval <= 10)
		{
			int err = dbset("system.grub.timeout=%i", timeoutval);
		}
	}
	else if (signal == "graphtft-state-change")
	{
		if ((value == "") || (value == "1"))
		{
			int err = dbset("vdr.plugin.graphtft.enabled=%s", (value == ""?"0":"1"));
		}
	}
	else if (signal == "change-sound" )
	{
		vector<string> parts;
		Tokenize(value, parts, "#");
		dbremove("system.sound");
		if (parts[0] == "ALSA") {
			//TODO: add verification
			dbset("system.sound.type=alsa");
			dbset("system.sound.alsa=%s", parts[1].c_str());
		} else if (parts[0] == "PULSE") {
			dbset("system.sound.type=pulse");
		}
	}
	else if (signal == "change-lifeguard" )
	{
		int err = dbremove("vdr.plugin.lifeguard.enable");
		if (values.size() > 0) {
			for (int i = 0; i < values.size(); i++)
			{
				if ((values[i] == "aptitude") || (values[i] == "ssh") ||
						(values[i] == "nfs") || (values[i] == "ftp") ||
						(values[i] == "xbmc") || (values[i] == "smb"))
				{
					err = dbset("vdr.plugin.lifeguard.enable.%i=%s", i, values[i].c_str());
					/*if (err != STATUS_OK){
					 }*/
				}
			}
		} else {
			err = dbset("vdr.plugin.lifeguard.enable=false");
		}
	}
	else if (signal == "test-viewport" )
	{
		signal_params = value + " " + value2 + " " + value3 + " " + value4 + " " + value5 + " " + value6 + " " + value7 + " " + value8 + " " + value9;
	}

	string cmd = "/usr/bin/signal-event " + signal;
	if (signal_params != "") {
		cmd += " " + signal_params;
	}

	ret = system( cmd.c_str() );
	success = "true"; //TODO: use ret to find out if we were successful.
}
</%cpp> {
	success: <$success$>,
	result: <$ret$>
}
