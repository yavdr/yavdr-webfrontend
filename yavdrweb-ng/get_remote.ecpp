<%pre>
#include <sys/types.h>
#include <dirent.h>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include <yavdr/common.h>
#include <jsoncpp/json.hpp>

using namespace std;
</%pre>
<& authenticate >
<%cpp>
	reply.setHeader ("Cache-Control", "no-cache", false);
	reply.setHeader ("Content-Type", "application/json", false);

	string lirc = "0";
	string lirc_serial_port;
	string lirc_receiver_description;
	int lirc_receiver_id = -1;
	string lirc_option_repeat = "0";


	string str;
	int index = 1;
	HDF *hdf = NULL;
	NEOERR *err;
        string directories[] = {"/usr/share/yavdr-remote/hwdb.d/",
                                "/etc/yavdr-remote/hwdb.d/"};
        #define EXTENSION ".hwdb"

	//get current lirc settings from database
	if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
	{
		nerr_log_error(err);
	}
	else
	{
		lirc_receiver_description = hdf_get_value(hdf, "system.remote.lirc.receiver.description", "");
		lirc_serial_port = hdf_get_value(hdf, "system.remote.lirc.receiver.serial_port", "");
		lirc = hdf_get_value(hdf, "system.remote.lirc.active", "");
		lirc_option_repeat = hdf_get_value(hdf, "system.remote.lirc.option.repeat", "");
	}

	Json::Value list;
	list[0u][0u] = "-1";
	list[0u][1u] = "-";
	list[0u][2u] = "-";
	list[0u][3u] = "-";
	list[0u][4u] = "-";
	list[0u][5u] = "-";

        DIR *dp;
        struct dirent *dirp;
        vector<string> files;

        for (unsigned int i = 0; i < sizeof(directories) / sizeof(directories[0]); i++) {
          if ((dp  = opendir(directories[i].c_str())) == NULL) {
            break;
          }

          while ((dirp = readdir(dp)) != NULL) {
            if ((strlen(dirp->d_name) > 4) &&
                 strcmp(dirp->d_name + strlen(dirp->d_name) - 1 - strlen(EXTENSION), EXTENSION)) {
              files.push_back(directories[i] + string(dirp->d_name));
            }
          }
          closedir(dp);
        }

	ifstream ifs;
	int next;
	for (int findex = 0; findex < files.size(); findex++)
	{
		ifs.open(files[findex].c_str(), ifstream::in);

		while (ifs.good())
		{
			getline(ifs, str);
			if (isalpha(str[0]))
			{
				string::size_type bof = 0;
				string::size_type found;
	
				list[index][0u] = index;
				for (int i = 1; i <= 5; i++)
				{
					found = str.find_first_of(";", bof);

					if (lirc_receiver_description != "" && str.substr(bof, found - bof) == lirc_receiver_description) {
						lirc_receiver_id = index;
					}

					list[index][i] = str.substr(bof, found - bof);
					bof = found + 1;
				}
				index++;
			}
		}

		ifs.close();
	}

    Json::Value json;
    json["lirc_receiver_id"] = lirc_receiver_id;
    json["lirc_serial_port"] = lirc_serial_port;
    json["lirc_option_repeat"] = lirc_option_repeat;
    json["lirc"] = lirc;
    json["lirc_receiver_list"] = list;
    reply.out() << json;

</%cpp>
