<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include <yavdr/common.h>

using namespace std;
</%pre><%args>
</%args>
<& authenticate >
<%cpp>
reply.setHeader ("Cache-Control", "no-cache", false);
reply.setHeader ("Content-Type", "application/json", false);

HDF *hdf = NULL;
NEOERR *err;

if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
{
  nerr_log_error(err);
}
else
{
  const char * base = "system.net.wol.addresses";
  HDF * node = hdf_get_obj( hdf, base );

  long count = 0;
  reply.out() << "{\nrows : [";
  if( node )
  {
    HDF * child = node->child;
    while( child && child->child )
    {
      count++;
      reply.out() << "{\n";
      HDF * grandchild = child->child;
      while( grandchild && grandchild->value ) {
    	reply.out() << "\t";
    	reply.sout() << grandchild->name;
    	reply.out() << " : \"";
    	reply.sout() << grandchild->value;
    	reply.out() << "\"";
    	
    	grandchild = grandchild->next;
    	if (grandchild)
    	  reply.out() << ",\n";
    	else
    	  reply.out() << "\n";
      }
      
      reply.out() << "}";

      child = child->next;
      if (child)
    	reply.out() << ",";
    }
  }
  reply.out() << "],\n";
  reply.out() << "results : ";
  reply.sout() << count;
  reply.out() << "\n}";
}
</%cpp>
